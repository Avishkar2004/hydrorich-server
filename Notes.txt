How to start Server With Redis if its not installed already :-

Use this command :- "docker-compose up -d"

then npm run dev


Q. Where to see Cache Data after hitting Req :-

1. First, let's connect to the Redis CLI inside your running container:

  "docker exec -it hydrorich-redis redis-cli"

Now that you're in the Redis CLI, here are some useful commands to view your cache data:

1. To see all keys in the cache:

KEYS *

 keys *
1) "cache:/api/products"

2. To get the value of a specific key:
GET <key_name>

GET cache:/api/products

3. To see the type of a key:

TYPE <key_name>

4. To see all keys matching a pattern:
KEYS <pattern>

5. To see all members of a set:
SMEMBERS <set_name>

6. To see all elements in a list:
LRANGE <list_name> 0 -1

7. To see all fields and values in a hash:
HGETALL <hash_name>

You can type these commands directly in the Redis CLI prompt (127.0.0.1:6379>). To exit the Redis CLI, you can type exit or press Ctrl+C.
Additionally, if you want to monitor Redis operations in real-time, you can use:

MONITOR



====================




import nodemailer from "nodemailer";
import { validateContactInput } from "../utils/validateContact.js";
import { GoogleGenerativeAI } from "@google/generative-ai";

// Initialize Google AI
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_AI_KEY);

// Create a transporter for sending emails
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASSWORD,
  },
});

// Function to generate AI response
async function generateAIResponse(name, subject, message) {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });

    const prompt = `As a customer service representative for Hydrorich, a water purification company, 
    please write a professional and helpful response to the following customer inquiry:
    
    Customer Name: ${name}
    Subject: ${subject}
    Message: ${message}
    
    The response should:
    1. Be professional and friendly
    2. Address the customer's specific concerns
    3. Include relevant information about our water purification products/services
    4. End with a call to action
    5. Be concise but comprehensive
    6. Maintain a helpful and supportive tone`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    return response.text();
  } catch (error) {
    console.error("AI response generation error:", error);
    return null;
  }
}

export const submitContactForm = async (req, res) => {
  try {
    const { name, email, subject, message } = req.body;

    // Validate input
    const errors = validateContactInput({ name, email, subject, message });
    if (Object.keys(errors).length > 0) {
      return res.status(400).json({ success: false, errors });
    }

    // Generate AI response
    const aiResponse = await generateAIResponse(name, subject, message);

    // Prepare email content for admin
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: process.env.ADMIN_EMAIL,
      subject: `New Contact Form Submission: ${subject}`,
      html: `
        <h2>New Contact Form Submission</h2>
        <p><strong>Name:</strong> ${name}</p>
        <p><strong>Email:</strong> ${email}</p>
        <p><strong>Subject:</strong> ${subject}</p>
        <p><strong>Message:</strong></p>
        <p>${message}</p>
        ${aiResponse ? `
        <h3>AI-Generated Response:</h3>
        <p>${aiResponse}</p>
        ` : ''}
      `,
    };

    // Send email to admin
    await transporter.sendMail(mailOptions);

    // Send response email to user
    const userMailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "Thank you for contacting Hydrorich",
      html: `
        <h2>Thank you for contacting us!</h2>
        <p>Dear ${name},</p>
        <p>We have received your message and will get back to you as soon as possible.</p>
        <p>Here's a copy of your message:</p>
        <p><strong>Subject:</strong> ${subject}</p>
        <p><strong>Message:</strong></p>
        <p>${message}</p>
        ${aiResponse ? `
        <h3>Initial Response:</h3>
        <p>${aiResponse}</p>
        ` : ''}
        <br>
        <p>Best regards,</p>
        <p>The Hydrorich Team</p>
      `,
    };

    await transporter.sendMail(userMailOptions);

    return res.status(200).json({
      success: true,
      message: "Message sent successfully",
      aiResponse: aiResponse || null,
    });

  } catch (error) {
    console.error("Contact form error:", error);
    return res.status(500).json({
      success: false,
      message: "Failed to send message. Please try again later.",
    });
  }
};
